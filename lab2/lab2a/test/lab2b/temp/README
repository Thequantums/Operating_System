NAME: sokchetra eung
EMAIL: sokchetraeung@gmail.com
ID: 405147924

QUESTION 2.1.1 - The cost for creating threads takes longer than the loop finishes iterations. it takes longer for the main function to create threads than the first created thread finishes iterations. So, all the threads would be
		 running in serial consequences which dose not cause synchronization issue.

		Similar to above answer, with small number of iterations, each newly created thread would finish earlier before the next thread created.
		So, no two threads can access the shared global variable counter at the same time. 

QUESTION 2.1.2 - yielding causes cpu to stop the currently run thread and switch to run another. This action implies context switches which is very expensive.
		 The extra time caused by context switches.
		
		It is not possible to get valid per-operation timings if we are using the --yield option. because The elapsed time of all the threads also include
		context switches time cost which contributes a lot.


QUESTION 2.1.3 - The cost per operation drops because the overhead of the creating threads would be relativly smaller compared to the cost of large iterations
		 the cost per operation time is divided by the large iterations, so it is getting smaller.
	
		 To get the correct cost of per iteration, we need to run the number of iterations to infinity, so the cost of creating threads would be zero.
		 

QUESTION 2.1.4 - all of the options perform similarly for low numbers of threads because there are not many threads try to access the shared counter and wait for locks in the add function.
		
		All the three protected operations slow down as the number of threads rises because there are many threads tring to access the crital section and wait for lock.
		So, more threads have to wait for one threads to finish one by one before all threas can finish.

QUESTION 2.2.1 - Both of the curves from add and list have the general shapes of increasing as the number of threads increases. Because as number of threads increases, more threads
		 are contesting for the lock to get to critcal section which prolong the total time.
		
		 the slope of increase for list is larger than the slope of increase for add because there are more operations insidde crital section of list 
		 than in the add. So, each thread have to wait longer before another thread finish and obtain the lock.
		
QUESTION 2.2.2 - The curves of spin lock and mutex for both list and add are generally similar shape. They are all increasing as the number of threads increases. However, the spin lock curves cost per operation
		 is increasing way faster than the mutex. This is because spin locks keeps looping and asking for the lock until it gets the lock which wested cpu cycles. Mutex, on the other hand, when it does not get a lock, 
		 goes to sleep and let cpu switch to another thread.
		

lab2_add.c : a c source code that takes number of threads and iterations and run parrelelly to perform adding operation on a global variable counter. Can be specified with lock types and
	     yield option.

SortedList.h: a header file for SortedList.c that contains four functions of link lists.

SortedList.c: a c source code that contains four functions: insert, delete, look up and getlength.

lab2_list.c: a c source code that takes command line agruments number of threads, iterations, lock types, and yield types.
	     it creates threads and each thread perform insert, get length, look up and delete. all threads access the global head list variable.

README: contains answers to questions and information about files.

*.csv:
	 test scripts to generate ploting provided.

*.png:
	image files of the plots

Makefile:
	run over 200 cases test and generate plots
	dafault to compile c sources code
	clean 
	dist to build tarball
	graphs to graph ploting to png files


